@use "../_func" as *;

$chart-colour-1: #1EBEE6!default;
$chart-colour-2: #FFD2D2!default;
$chart-colour-3: #B4E6A5!default;
$chart-colour-4: #ffa500!default;
$chart-colour-5: #46003c!default;
$chart-colour-6: #b4e6a5!default;
$chart-colour-7: #1ebee6!default;
$chart-colour-8: #ffd2d2!default;
$chart-colour-9: #9d9d9d!default;
$chart-colour-10: #66838a!default;

$chart-colors: ();
$chart-colors: map-merge((
  1: $chart-colour-1,
  2: $chart-colour-2,
  3: $chart-colour-3,
  4: $chart-colour-4,
  5: $chart-colour-5,
  6: $chart-colour-6,
  7: $chart-colour-7,
  8: $chart-colour-8,
  9: $chart-colour-9,
  10: $chart-colour-10
), $chart-colors);

$chart-height: 56.25%!default;
$chart-height-lg: 42.86%!default;

// Selectors
$default-chart: 'input[type="radio"]:not([value="none"]):not([value="pie"]):checked ~ .chart__wrapper';
$bar-chart: 'input[type=radio]:is([value="bar"],[value="comparison"]):not([value=none]):not([value=pie]):checked~.chart__wrapper';

// #region Basic setup - including: container setup, css vars 

::slotted(table) {
  display: none!important;
}

.chart__outer {

  container-type: inline-size;
  margin-bottom: 2rem;
  display: flex;
  flex-direction: column;

  > * {
    display: block;
    order: 2;
  }
  
  // CSS vars that can be overwritten by declaring them without the -set on the end of the variable i.e. --chart-colour-1: red; would overwrite --chart-colour-1-set
  --body-colour-set: var(--body-colour, Canvas);
  --text-colour-set: var(--text-colour, black);
  --chart-height-set: var(--chart-height, #{$chart-height});
  --chart-height-lg-set: var(--chart-height-lg, #{$chart-height-lg});
  --chart-height-resp: var(--chart-height-set);

  tbody {
    --chart-direction: 360deg;
    --chart-day-bg-pos: 100% calc(var(--single-day) * 7)
  }
  

  @each $index, $value in $chart-colors {
    --chart-colour-#{$index}-set: var(--chart-colour-#{$index},#{$value});
  }

  // Non-configurable css vars
  --index-below: -1;
  --index-base: 0;
  --index-focus: 2;
  --index-above: 10;
  --index-floating: 100;
  --index-menu: 200;
  --index-overlay: 1000;
  --key-label-width: 100%;
  --label-size: #{rem(12)};
  --pie-size: calc(50% - 1.4rem);
  --line-thickness: 1px;
  --yaxis-width: auto;
  --yaxis-point-display: block;
  --yaxis-last-point-transform: translate(0,-50%);
  --bar-gap: min(10%, 0.75rem);

  @container (max-width: 36em) {

    :has(tr:nth-child(5) td:nth-child(4)),
    :has(tr:nth-child(10)){
        
      --yaxis-width: 0;
      --yaxis-point-display: none;
      --yaxis-last-point-transform: translate(0,-100%);
      --bar-gap: 0;
    }
  }

  @container (max-width: 63em) {
    :has(tr:nth-child(10)){
        
      --bar-gap: 0;
    }
  }

  @container (min-width: 36em) {
    .chart__wrapper {
      --chart-height-resp: var(--chart-height-lg-set);
      --pie-size: calc(33.333% - 1.4rem);
      --line-thickness: 0.8px;
      --yaxis-width: auto;
      --yaxis-point-display: block;
      --yaxis-last-point-transform: translate(0,-50%);
    }
  }
  
  @container (min-width: 62em) {

    .chart__wrapper {
      
      --label-size: #{rem(14)};
      --pie-size: calc(25% - 1.5rem);
      --line-thickness: 0.5px;
    }
  }
}
// #endregion



// #region Chart key
.chart__outer > input[type="checkbox"] {
  opacity: 0;
  position: absolute;
  pointer-events: none;
}

.chart__key {

  padding: 0 0 0 0;
  margin-bottom: 1.5rem;
  //background: var(--colour-key-bg, rgb(220, 220, 220));
  display: flex;
  overflow: auto;
  scroll-snap-type: x mandatory;
  scroll-padding: 0.75rem;
  justify-content: flex-end;
  gap: 0.5rem;

  .key {

    font-size: 1rem!important;
    margin: 0;

    &:before {
      content: "";
      height: 0.8em;
      width: 0.8em;
      margin-right: 0.3em;
      background-color: var(--chart-colour);
      display: inline-block;
      border-radius: 50%;
    }

    /*
    display: inline-block;
    padding: 0.5rem;
    margin-right: 0.75rem;
    margin-bottom: 0.75rem;
    background: white;
    white-space: nowrap;
    cursor: pointer;
    scroll-snap-align: start;

    &:hover,
    &:focus-within {
      outline: 3px solid var(--chart-colour);
    }
    */

    &[data-label="Min"],
    &[data-label="Max"] {
      display: none;
    }

    .chart__total {
      display: none;
    }
  }
}

// Hide chart keys
.chart__outer > input[type="checkbox"]:not(:checked) ~ .chart__key .key {
  
  opacity: 0.25;
}

@for $i from 1 to 10 {
  
  .chart__outer > input[type="checkbox"]:nth-of-type(#{$i}):not(:checked) ~ .chart__key .key:nth-of-type(#{$i}) {
    opacity: 1;
  }
}
// #endregion



// #region Default column chart (Also applies to line chart)
.chart__wrapper {

  display: block;
  display: flex;
  flex-direction: row;
  position: relative;
  margin-bottom: 1rem;

  .chart__yaxis {
    display: flex;
    flex-direction: column-reverse;
    width: var(--yaxis-width);

    .axis__point {
      
      bottom: var(--percent);
      position: relative;
      height: 0;
      white-space: nowrap;

      &:not(:last-child){
        display: var(--yaxis-point-display);
      }

      span {
        display: block;
        transform: translate(0,-50%);
        padding-right: 0.25rem;
        text-align: right;
        font-size: var(--label-size);
      }

      &:last-child span {

        transform: var(--yaxis-last-point-transform);
      }
    }
  }

  .chart__xaxis {
    margin-bottom: 1rem;
    display: flex;
    flex-direction: column-reverse;
    width: 100%;
    position: absolute;
    left: 0;
    bottom: -1rem;

    .axis__point {
      
      left: var(--percent);
      width: 1px;
      position: absolute;
      height: 0;
      white-space: nowrap;

      span {
        display: block;
        transform: translate(-50%, 0%);
        text-align: center;
        font-size: var(--label-size);
        position: absolute;
        left: 50%;
      }
    }
  }

  .chart__guidelines {

    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column-reverse;
    pointer-events: none;

    .guideline {

      bottom: var(--percent);
      position: absolute;
      right: 0;
      width: 100%;
      height: 0px;
      margin-bottom: -1px;
      border-bottom: 1px dashed #eeeeee;
      pointer-events: none;
      z-index: var(--index-below);
      //overflow: hidden;

      &:not(.guideline--target) span{
        display: none;
      } 
    }

    .guideline--target {

      border-bottom: 1px dashed #000000;
      z-index: var(--index-above);
      text-shadow: 1px solid white;
      overflow: visible;

      span {
        position: absolute;
        bottom: 0;
        font-size: var(--label-size);
        text-shadow: 1px 1px 2px rgba(255, 255, 255, 1);
        background: rgba(255,255,255,0.6);
      }
    }
    [data-value="0"] {
      border-bottom: 1px solid var(--colour-primary);

      &:not(:first-child){

        border-bottom: 1px dashed var(--colour-primary);
      }
    }
  }

  .chart {
    
    position: relative;
    flex-grow: 1;
  }

  table {
    display: block;
    width: 100%!important;
    padding-top: var(--chart-height-resp); // 16:9 ratio
    position: relative;
    margin-bottom: 0;
    overflow: visible;

    thead {
      display: none;
    }

    tbody {

      display: flex;
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      flex-direction: row;
      border: none;
    }
    
    tbody tr {
      display: flex;
      flex-direction: row;
      justify-content: center;
      align-items: flex-end;
      border: none;
      width: 100%;
      height: 100%;
      position: relative;
      padding: 0 2px;
      gap: var(--bar-gap);

      td {
        font-weight: inherit;
      }

      td:first-child {
        position: absolute;
        top: 100%;
        left: 50%;
        transform: translate(-50%,0);
        width: fit-content;
        padding: 0;
        white-space: nowrap;
        max-width: 6rem;
        overflow: hidden;
        text-overflow: ellipsis;
        font-size: var(--label-size);
        //display: none;
        text-align: center;

        @container (min-width: 62em) {
    
          display: block;
          left: 50%!important;
          transform: translate(-50%,0)!important;
        }
      }

      td[data-label="Min"],
      td[data-label="Max"] {
        display: none;
      }

      &:first-child td:first-child,
      &:last-child td:first-child {

        display: block;
      }

      td:not(:first-child) {
        height: 100%;
        height: var(--percent, 0%);
        bottom: var(--bottom,0%);
        width: 100%;
        max-width: 1.5rem;
        position: relative;
        background: green;
        padding: 0;
        background: var(--chart-colour);
        border-top-right-radius: 4px;
        border-top-left-radius: 4px;

        &:has(span:empty),
        &:empty{
          display: none;
        }

        &[data-label]:before {
          display: none;
        }

        span {
          position: absolute;
          bottom: 100%;
          left: 50%;
          font-size: var(--label-size);
          line-height: 1.2;
          transform: translate(-50%,0);
          background: var(--chart-colour);
          opacity: 0;
          pointer-events: none;
          padding: 0.5rem;
          border-radius: 0.5rem;
          margin-bottom: 0.25rem;
          color: var(--colour-primary-theme);
          white-space: pre;
          text-align: center;

          &::before {
            content: attr(data-label)'\A'attr(data-group)'\A';
          }

          &[data-second]:after {
            content: '\A' attr(data-second-label) ': ' attr(data-second);
          }
        }

        &:hover span {
          opacity: 1;
          z-index: var(--index-above);
        }
      }

      @container (min-width: 36em) {

        &:first-child td:not(:first-child) span,
        &:last-child td:not(:first-child) span {
          
          left: 50%;
          transform: translate(-50%,0);
          text-align: center;
        }
      }

      td:first-child {
        &[data-label]:before {
          display: none;
        }
      }
    }

    // change the look of chart when crowded
    @container (max-width: 36em) {
      tbody:has(tr:nth-child(5) td:nth-child(4)) tr,
      tbody:has(tr:nth-child(10)) tr {

        td:first-child {
          display: none;
        }
        
        &:first-child td:first-child {

          left: 0%;
          transform: translate(0,0);
          display: block;
          text-align: left;
        }
        &:last-child td:first-child {

          left: 100%;
          transform: translate(-100%,0);
          display: block;
          text-align: right;
        }
        
        &:first-child td:not(:first-child) span {

          left: -20%;
          transform: translate(0%,0);
          text-align: left;
        }

        &:last-child td:not(:first-child) span {
            
          left: 120%;
          transform: translate(-100%,0);
          text-align: right;
        }
      }
    }
    // Hide labels when it gets crowded
    @container (min-width: 62em) {

      tbody:has(tr:nth-child(25)){
        tr td:first-child {
          display: none!important;
        }

        tr:is(:first-child, :nth-child(5n)) td:first-child {
          display: block!important;
        }
      }

      tbody:has(tr:nth-child(50)){

        tr:is(:first-child, :nth-child(5n)) td:first-child,
        tr td:first-child {
          display: none!important;
        }

        tr:is(:first-child, :nth-child(10n)) td:first-child {
          display: block!important;
        }
      }

      tbody:has(tr:nth-child(100)){

        tr:is(:first-child, :nth-child(10n)) td:first-child,
        tr td:first-child {
          display: none!important;
        }

        tr:is(:first-child, :nth-child(20n)) td:first-child {
          display: block!important;
        }
      }
    }

    // Hide items when theres too many too display
    tbody:has(tr:nth-child(1001)){

      tr {
        display: none;
      }

      tr:nth-last-child(-n+1001) ~ tr {
        display: flex;
      }
    }
  }

  .line,
  .pie {
    display: none;
  }
}
// #endregion

// #region Bar chart
@mixin barchart($selector) {
  #{$selector} {

    tbody {
      --chart-direction: 90deg;
    --chart-day-bg-pos: calc(var(--single-day) * 7) 100%;
    --bar-gap: 0;
    }

    .chart__guidelines {
      position: absolute;

      .guideline {
        bottom: auto;
        left: var(--percent);
        height: 100%;
        border-left: 1px dashed #eee;
        width: 0;

        span{
          display: block;
          font-size: var(--label-size);
          position: absolute;
          top: 100%;
          transform: translate(-50%,0.2em);
        } 
      }
    }

    .chart__yaxis {

      display: none;
    }

    table {

      padding-top: 0;
    }

    table tbody {

      flex-direction: column;
      position: relative;
    }

    table tbody tr {
      flex-direction: column;
      align-items: flex-start;
      margin-bottom: 0.5rem;
      padding: 0;

      td {
        
        height: 3rem;
        bottom: 0;
        left: var(--bottom, 0%);
        width: var(--comparison,var(--percent));
        max-width: 100%;
        border-top-left-radius: 0;
        border-bottom-right-radius: 4px;
      }

      td:first-child {
        position: static;
        transform: none;
        display: block!important;
        max-height: 1.5rem;
      }
    }

    &[data-longest-label] {
      &:before {
        display: block;
        content: attr(data-longest-label);
        font-size: var(--label-size);
        padding-right: 0.5em;
        opacity: 0;
        pointer-events: none;
        white-space: nowrap;
      }   
    }

    &[data-longest-label] table tbody tr {
      td:first-child {
        position: absolute;
        transform: translate(-100%, -50%)!important;
        display: block !important;
        max-height: 1.5rem;
        z-index: var(--index-above);
        top: 50%;
        left: 0!important;
        padding-right: 0.5em;
      }
    }

  }
}

@include barchart('.chart__outer '+$bar-chart);


// #endregion

// #region stacked
input[type="radio"]:not([value="pie"])[value="stacked"]:checked ~ .chart__wrapper {
  table tbody tr {
    --bar-gap: 0;
    flex-direction: column-reverse;
    justify-content: flex-start;
    align-items: center;

    td {
      border-radius: 0!important;
    }
  }
}
// #endregion




// #region animation

#{'.chart--animate.animating.inview'} {

  --animation-left: 2s;

  table tbody tr td:not(:first-child){

    transition: height 2s ease-out, width 2s ease-out, bottom 2s ease-out, left var(--animation-left) ease-out;
    transition-delay: calc(var(--row-index) * 0.1s);
  }
}

#{'.chart--animate:not(.inview)'} {

  table tbody tr td:not(:first-child) {
    --bottom: var(--min-bottom, 0%)!important;
    --percent: 0%!important;
    --axis: 0%!important;
    --comparison: 0%!important;
  }
}

// #region Animate bar and column chart
#{'.chart--animate.animating ' + $default-chart} {

  table tbody tr td:not(:first-child) {
    overflow: hidden;
  }
}
// #endregion

// #endregion

