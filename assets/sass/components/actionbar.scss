@use "../_func.scss" as *;



.actionbar__wrapper {

  position: relative;
  height: rem(68);
}

.views,
.selectall {
  position: absolute!important;
  top: 50%;
  left: rem(24);
  
  @include media-breakpoint-up(sm) {
    left: rem(32);
  }

  transform: translate(0,-50%);

  padding-left: rem(4);
  margin-left: rem(-4);
  z-index: 10;
}

.selectall {
  

  width: rem(40);

  overflow: hidden;

  label {
    height: rem(40);
    
  }

  @include media-breakpoint-up(sm) {

    width: auto;
    overflow: visible;
  }

}

.actionbar [data-search] {
  display: none;
}

:host([data-search]) .actionbar [data-search] {
  display: block;
  margin-left: rem(16)!important;
}

:is(.actionbar,.actionbar--selected,.actionbar--search){
  
  padding: 0 rem(24);
  flex-wrap: nowrap;
  justify-content: flex-end;
  align-items: center;
  height: rem(68);

  position: absolute;
  inset: 0;


  @include media-breakpoint-up(sm) {
    padding: 0 rem(32);
  }
}

.actionbar {

  display: flex;
}

.actionbar--selected {

  background-color: #E6EAEC;
  display: flex;
  opacity: 0;
  pointer-events: none;
}

.actionbar--search {

  background-color: #E6EAEC;
  display: flex;
  z-index: 2;
  position: relative;
  opacity: 0;
  pointer-events: none;
}


// Show selected bar
.selectall:has(input:checked) ~ .actionbar,
.selectall:has(input:indeterminate) ~ .actionbar {
  
  opacity: 0;
  pointer-events: none;
}
.selectall:has(input:checked) ~ .actionbar--selected,
.selectall:has(input:indeterminate) ~ .actionbar--selected {
  
  opacity: 1;
  pointer-events: all;
}

// Show search bar
.actionbar--search.show {
  
  opacity: 1;
  pointer-events: all;
}

.actionbar__wrapper:has(.actionbar--search.show) > *:not(.actionbar--search.show) {
  opacity: 0;
  pointer-events: none;
}


::slotted(*){
  margin-top: 0!important;
  margin-bottom: 0!important;
  margin-left: rem(16)!important;
  margin-right: 0!important;
}

::slotted(.btn:not(.btn-action)){
  order: 2;
}

// #region action buttons 


// buttons only for single items
::slotted([data-single]){
  pointer-events: none;
  opacity: 0.5;
}
:host([data-selected="1"]) ::slotted([data-single]){
  pointer-events: all;
  opacity: 1;
}

::slotted(hr){
  height: rem(32);
  color: #9D9D9D!important;
  width: 1px;
  display: none;
  
  @include media-breakpoint-up(md) {

    display: block;
  }
}

// #endregion




.safe-area {

  display: flex;
  flex-wrap: nowrap;
  justify-content: flex-end;
  align-items: center;
  width: rem(210);

  @include media-breakpoint-up(sm) {

    width: rem(450);
  }

  @include media-breakpoint-up(md) {

    width: rem(750);
  }

  overflow: visible;
  position: relative;

  .body {
    display: contents;
  }
}

// #region overflow dialog 
::slotted(.btn-compact[slot="selected-overflow"]) {

  max-width: none!important;
  text-indent: 0!important;
  width: auto!important;
  text-align: left!important;
  padding-left: 0!important;
  background: none!important;
  border: none!important;

  &:before {
    position: static!important;
    line-height: inherit!important;
  }
}

::slotted(.dialog__wrapper[slot="overflow"]) dialog[open]{

 
    
  background: red;
  
}


// #endregion




// #region Search bar
.actionbar--search .btn{

  margin-left: rem(-12)!important;
  margin-right: auto!important;

  &:before {
    font-size: 2rem!important;
    font-weight: normal!important;
  }
}

.search-wrapper {
  width: calc(100% - #{rem(44 + 8)});
  max-width: rem(350)!important;
  margin: 0!important;

  @include media-breakpoint-up(md) {

    max-width: rem(450)!important;
  }

  input {
    padding-top: rem(8);
    padding-bottom: rem(8);

    min-height: rem(40)!important;
    max-height: rem(40)!important;
  }

  :is(.prefix,.suffix) {
    
    padding: rem(8)!important;
    min-height: rem(40)!important;
    max-height: rem(40)!important;
    min-width: rem(40)!important;
    max-width: rem(40)!important;
    line-height: rem(40 - 8 - 8)!important;
  }
}
// #endregion
