@use "sass:math";
@use "sass:map";

@import "../../bootstrap/scss/_functions";

@function spacing($int){
  @return map.get($spacers, $int);
}

@function pow($x, $n) {
  $ret: 1;
    
  @if $n >= 0 {
    @for $i from 1 through $n {
      $ret: $ret * $x;
    } 
  } @else {
    @for $i from $n to 0 {
      $ret: math.div($ret,$x);
    }
  }
  
  @return $ret;
}

@function to-fixed($float, $digits: 2) {
  $sass-precision: 5;
  
  @if $digits > $sass-precision {
    @warn "Sass sets default precision to #{$sass-precision} digits, and there is no way to change that for now."
    + "The returned number will have #{$sass-precision} digits, even if you asked for `#{$digits}`."
    + "See https://github.com/sass/sass/issues/1122 for further informations.";
  }
  
  $pow: pow(10, $digits);
  @return math.div(round($float * $pow),$pow);
}

// converts pixels to em (context sets the current size of the font)
@function em($pixels, $context: 16)
{
	@return #{math.div($pixels,$context)}em;
}

@function rem($pixels, $context: 16)
{
	@return #{math.div($pixels,$context)}rem;
}

@function vw($pixels, $context: 16)
{
	$size: math.div(16,$pixels) * 100;
	@return #{to-fixed($size,5)}vw;
}

@function strip-px($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }

  @return $number;
}

// prevent colours being changed via sass functions
@function darken($colour, $percent)
{
	@return $colour;
}

@function lighten($colour, $percent)
{
	@return $colour;
}

@function saturate($colour, $percent)
{
	@return $colour;
}
@function desaturate($colour, $percent)
{
	@return $colour;
}

@function adjust-hue($colour, $percent)
{
	@return $colour;
}

@function tint($colour, $percentage) {
  @return mix(white, $colour, $percentage);
}
@function shade($colour, $percent)
{
	@return $colour;
}

@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints), null);
}

// Trims the start/left of the string:
@function str-trimStart ($str) {
  @if (str-slice($str, 1, 1) == ' ') {
      @return str-trimStart(str-slice($str, 2));
  } @else {
      @return $str;
  }
}

// Trims the end/right of the string:
@function str-trimEnd ($str) {
@if (str-slice($str, str-length($str), -1) == ' ') {
      @return str-trimEnd(str-slice($str, 1, -2));
  } @else {
      @return $str;
  }
}

// Trims both the start and end of the string:
@function str-trim ($str) {
@return str-trimStart(str-trimEnd($str));
}

@function str-split($string, $separator) {
  // empty array/list
  $split-arr: ();
  // first index of separator in string
  $index : str-index($string, $separator);
  // loop through string
  @while $index != null {
      // get the substring from the first character to the separator
      $item: str-slice($string, 1, $index - 1);
      // push item to array
      $split-arr: append($split-arr, str-trim($item));
      // remove item and separator from string
      $string: str-slice($string, $index + 1);
      // find new index of separator
      $index : str-index($string, $separator);
  }
  // add the remaining string to list (the last item)
  $split-arr: append($split-arr, str-trim($string));

  @return $split-arr;
}

