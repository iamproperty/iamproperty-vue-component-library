@import "../../bootstrap/scss/_mixins";

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media screen and (min-width: $min) {
      @content;
    }
  }
  @else if $name =='xs' {
    @content;
  } 
  @else {
    @if $mobileOnly != "true" {
    @content;
    }
  }
}

@mixin dark-mode(){
  @media screen and (prefers-color-scheme: dark) {
    @if $darkMode == "true" {
        
      @content;
    }
  }
}

@mixin light-mode(){

  @if $darkMode == "true" {
    @media screen and (prefers-color-scheme: light) {
    
      @content;
    }
  }
  @else {
    @content;
  }
}

@mixin layer($name){
  @if $layers == "true" {

    @layer #{$name} {

      @content;
    }
  }
  @else {
    @content;
  }
}

@mixin container-up($name) {
  
  @if $name == 'sm' {
    
    @container (width > 23.4375em) {
      @content;
    }
  }
  @else if $name == 'md' {
    
    @container (width > 48em) {
      @content;
    }
  }
  @else if $name =='xs' {
    @content;
  } 
  @else {
    @if $mobileOnly != "true" {
    @content;
    }
  }
}


// Example: @include prefix(transition, transform 1.5s, webkit ms o);
@mixin prefix($property, $value, $prefixes: (webkit ms o))
{
	@each $prefix in $prefixes
	{
		#{'-' + $prefix + '-' + $property}: $value;
	}
	
	// Output standard non-prefixed declaration
	#{$property}: $value;
}

// Used to make it possible to use css properties but still support IE11
@mixin var($property, $varName, $important:"", $compatible:$compatible) {

  @if $compatible == "true" {
    #{$property}: map-get($vars, $varName) #{$important};
  }
  @else {
    #{$property}: var(#{$varName}) #{$important};
  }
}

@mixin inline-text(){
  p,
  ul,
  ol,
  dd,
  .body,
  table:not(.table--email) td {
    @content;
  }
}


@mixin headers($includeClasses: 'false'){
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @content;
  }

  @if $includeClasses == 'true' {

    .h1,
    .h2,
    .h3,
    .h4,
    .h5,
    .h6 {
      @content;
    }
  }
}

@mixin bg-variant($parent, $color, $ignore-warning: false) {
  #{$parent} {

    --bg-colour: var(--colour-#{str-replace($parent,'.bg-','')});
    --bg-colour-tint: var(--colour-#{str-replace($parent,'.bg-','')}-tint);
    
    @include var(background-color,--colour-#{str-replace($parent,'.bg-','')},!important);
  }
}
@mixin text-emphasis-variant($parent, $color, $ignore-warning: false) {
  #{$parent} {

    @include var(color,--colour-#{str-replace($parent,'.text-','')},"!important");
  }
}

@mixin font-size($value, $compatible:$compatible) {
  
  $found: false;

  @if $compatible == "true" {
    font-size: $value;
  }
  @else {
    @each $size, $subvalue in $font-sizes {

      @if($value == $subvalue and $found == false){
        font-size: var(--fs-#{$size});
        $found: true;
      }
    }
    @if $found == false {
      font-size: $value;
    }
  }

}

@mixin is($selector, $before: '', $after: '' ,$compatible:$compatible){

  @if $compatible == "true" {
    $split-values: str-split($selector, ",");
    @each $value in $split-values {

      #{$before}#{$value}#{$after} {
        @content;
      }
    }
  }
  @else {
    #{$before}:is(#{$selector})#{$after} {
      @content;
    }
  }
}

@mixin reset-colours($compatible:$compatible) {
  
  @each $color, $value in $non-theme-colors {

    --colour-#{$color}: #{$value};
  }

  .text-primary {
    color: var(--colour-primary)!important;
  }
}

@mixin invert-colours($compatible:$compatible) {
  
  @each $color, $value in $dark-mode-functional-colors {

    --colour-#{$color}: #{$value};
  }
}

@mixin slotted($el, $isComponent:"true"){
  
  @if $isComponent == "true" {
    ::slotted(#{$el}) {
    
      @content;
    }
  }
  @else {
    #{$el} {
    
      @content;
    }
  }
}