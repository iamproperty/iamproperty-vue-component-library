@use 'sass:math';
@use 'sass:map';
@use "../_func" as *;

// #region Main grid setup
body {
  --excess-space: calc((100% - var(--max-width, #{$max-width})) / 2);
  --col-size: calc((100% - max(0%,var(--excess-space)) - max(0%,var(--excess-space)) - var(--gutter, #{$gutter}) - var(--gutter, #{$gutter}) - (var(--gap, #{$gap}) * (#{$columns - 1}))) / #{$columns});
  column-gap: var(--gap, #{$gap});
  display: grid;
  margin-inline: 0;
  width: 100%;
  $templateColumns: '';
  @for $i from 1 to $columns {
    $templateColumns: $templateColumns + 'var(--col-size) [col-'+$i+'-end col-'+($i+1)+'-start] '
  }
  grid-template-columns: [full-width-start] calc(var(--excess-space) - var(--gap, #{$gap}))
                          [container-start] calc(var(--gutter, #{$gutter}) - var(--gap, #{$gap}))
                          [content-start col-1-start]
                          #{$templateColumns}
                          var(--col-size) [col-#{$columns}-end content-end] calc(var(--gutter, #{$gutter}) - var(--gap, #{$gap})) [container-end] calc(var(--excess-space) - var(--gap, #{$gap})) [full-width-end];
  grid-template-rows: auto;
  align-content: start;
  justify-content: center;

  & * {
    grid-column: content;

    &:not(div){
    }

    &:where(button){
        
      max-width: fit-content;
      place-self: start;
    }

    &:is(div){
        
      min-height: -webkit-fill-available;
      align-content: start;
    }
  }

  [class*="bg-"]{
    &:not([class*=col-]) {
      display: grid;
      grid-column: full-width;
      margin-bottom: 2rlh;
      grid-template-columns: subgrid;
    }
  }
}

// Remove semantic elements out of the grid
:is(#{$grid-ignore-elements}){
  display: contents;

  &[class*="bg-"]{
    display: grid; 
    grid-column: full-width;
    grid-template-columns: subgrid;
  }
}
// #endregion

// #region Grid utility classes
*:has([class*="order-"]) > * {
  order: 99;
}

@mixin grid-utilities($br: ""){
  .#{$br}inline-start {
    justify-self: start;
  }
  
  .#{$br}block-start {
    align-self: start;
  }

  .#{$br}inline-center {
    justify-self: center;
  }
  
  .#{$br}block-center {
    align-self: center;
  }

  .#{$br}inline-end {
    justify-self: end;
  }
  
  .#{$br}block-end {
    align-self: end;
  }

  .#{$br}display-contents {
    display: contents;
  }
  
  .#{$br}display-none {
    display: none;
  }
  
  .#{$br}display-block {
    display: block;
  }
      
  .#{$br}display-grid {
    display: grid;
  }
      
  .#{$br}flow-dense { // Apply to a wrapper div of the items
    grid-auto-flow: dense;
  }

  @for $i from 0 to $grid-utility-count {

    .#{$br}order-#{$i+1} {
      order: #{$i+1};
    }
  }
}

@include grid-utilities();
@each $br, $value in $breakpoints {
  @include breakpoint($br){
    @include grid-utilities(#{$br+'-'});
  }
}
// #endregion

// #region Create the columns
:is([class*="col-start-"], [class*="col-end-"], [class*="col-span-"]) {
  grid-column: var(--col-start, col-1-start) / var(--col-end, col-#{$columns}-end);
}

*:not(:where(html, body, #{$grid-ignore-elements})):has(:is([class*="cols-"], [class*="col-start-"], [class*="col-end-"], [class*="col-span-"])){

  display: grid;
  grid-template-columns: subgrid;    

  [class*="col-"] {
  
    --col-start: col-1;   
  }

  * {
    grid-column: var(--col-start, col-1-start) / var(--col-end, col-#{$columns}-end);
  }
}

@mixin grid-columns($br: ""){

  *:not(:where(main)):has(> [class*="#{$br}col-"]){
    display: grid;
    grid-template-columns: subgrid;
  }

  .#{$br}col-auto {
    --col-start: auto;
  }
  
  @for $i from 0 to $columns {

    .#{$br}col-start-#{$i+1} {
      --col-start: col-#{$i+1}-start!important;
    }

    .#{$br}col-end-#{$i+1} {
      --col-end: col-#{$i+1}-end;
    }
        
    .#{$br}col-span-#{$i+1} {
      --col-end: span #{$i+1};
    }
  }
}

@include grid-columns();
@each $br, $value in $breakpoints {
  @include breakpoint($br){
    @include grid-columns(#{$br+'-'});
  }
}
// #endregion

// #region Create rows
:where([class*="row-"],[class*="rows-"]) {
  grid-row: var(--row-start, auto) / span var(--row-span, 1);
}

@mixin grid-rows($br: ""){

  // Assign how many rows an item takes
  @for $i from 0 to $grid-utility-count {
    
    .#{$br}rows-#{$i+1} {
      --row-span: #{$i+1};
    }
  }

  // Move the item to a set row
  @for $i from 0 to $rows-per-page {
    
    .#{$br}row-start-#{$i+1} {
      --row-start: #{$i+1};
    }
  }
}

@include grid-rows();
@each $br, $value in $breakpoints {
  @include breakpoint($br){
    @include grid-rows(#{$br+'-'});
  }
}
// #endregion

// #region Create the Columns wrappers
[class*="cols-"]:not(.row) {
  display: grid;
  grid-template-columns: subgrid;
}

@for $i from 1 to math.floor(math.div($columns,2)) + 1 {
  
  $count: math.div($columns,$i);

  .cols-#{$i} > * {
    grid-column: auto / span #{math.floor($count)};
  }
}

@each $br, $value in $breakpoints {
  @include breakpoint($br){
    @for $i from 1 to math.floor(math.div($columns,2)) + 1 {
  
      $count: math.div($columns,$i);

      .cols-#{$br}-#{$i} > * {
        grid-column: auto / span #{math.floor($count)};
      }
    }
  }
}
