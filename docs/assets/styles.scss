@use '../../assets/sass/_func.scss' as *;

// Load the SCSS framework
$fontPath: '../../fonts/';
@import "../../assets/sass/_fonts.scss";
@import '../../assets/sass/_corefiles.scss';
@import "../../assets/sass/_forms";


@import url('https://fonts.googleapis.com/css2?family=Source+Code+Pro&display=swap');

code {
  font-family: 'Source Code Pro', monospace;
}

.note {
  border-left: 2px solid var(--colour-danger);
  padding: 1rem 0.5rem 1rem 0.5rem;
  background: rgba(0,0,0,0.05);

  strong:first-child {
    color: var(--colour-danger);
  }
}

.markdown-body {

  h1,h2,h3 {
    
    font-size: 1.125rem;
    line-height: 1.5rem;
    padding-bottom: 1rem;
  }
  
  h4,h5,h6 {
    font-size: 1rem;
    line-height: 1.25rem;
    padding-bottom: 1rem;
  }

  container-type: inline-size;
  
  
  td {
    min-width: 0!important;
  }

  @container (width < 23.4375em) {

    td:empty {
      display:none;
    }
  }

  p:has(strong:first-child:last-child){
    color: var(--colour-primary);
    padding-bottom: 0.5rem;
  }
}




.version-control {
  padding-top: 3rem;
  container-type: inline-size;

  table {
    --border-width: 0px;
    --inner-border-width: 0px;

    thead th {
      padding-bottom: 0.5rem;
      font-size: 1rem;
      color: var(--colour-body);

      &:nth-child(1){
        width: 1rem;
      }
      &:nth-child(2){
        width: 1rem;
      }
      &:nth-child(4){
        width: 9rem;
      }

    }

    tr > *:first-child {
      padding-inline-start: 0;
    }

    td {
      padding-top: 0;
    }
  }
}


@container (width >= 36em) {
  .version-control {
  
    table {
      thead th {
        &:nth-child(1){
          width: 9rem;
        }
        &:nth-child(2){
          width: 8rem;
        }
        &:nth-child(4){
          width: 9rem;
        }
      }
    }
  }
}



// Dark/Light mode themes


@media screen and (prefers-color-scheme: light) {
  .dark-theme {
    @each $color, $value in $dark-mode-colors {
      --colour-#{$color}: #{$value};
    }
    @include invert-colours();
    
    [class*="bg-"]:not(.bg-canvas):not(.bg-canvas-2) {

      @include reset-colours();
      --colour-body: #{$primary}!important;
      color: var(--colour-body)!important;
    }
  }
}

@media screen and (prefers-color-scheme: dark) {
  .light-theme {
    @each $color, $value in $theme-colors {
      --colour-#{$color}: #{$value};
    }
    @include reset-colours();

    // Reset the colours of lighter backgrounds to make sure they aren't over written by dark mode. Some other tweaks to colours are applied
    [class*="bg-"]:not(.bg-primary):not(.bg-dark):not(.bg-danger):not(.bg-white):not(.bg-canvas):not(.bg-canvas-2):not(.invert-colours) {

      @each $color, $value in $theme-colors {
        --colour-#{$color}: #{$value};
      }
      @include reset-colours();
      --colour-body: var(--colour-primary);
      color: var(--colour-body);
      }

    // Override the colours when on a dark background, similiar to dark mode but on a module level
    [class*="bg-"]:not(.bg-info):not(.bg-success):not(.bg-light):not(.bg-white):not(.bg-canvas):not(.bg-canvas-2):not(.prevent-invert),
    .invert-colours {

      @if $compatible != "true" {
        
        @include invert-colours();
      }

      color: #{$colour-inverted};
    }
  }
}

.dark-theme .dark-mode {
  display: block;
}

.light-theme .light-mode {
  display: block;
}

.dark-theme .light-mode {
  display: none;
}

.light-theme .dark-mode,
.dark-theme .colour-tints .bg-dark.tint-100,
.dark-theme .colour-tints .bg-dark.tint-90  {
  display: none;
}